import fetch from 'node-fetch';
import dotenv from 'dotenv';
import http from 'http';
import { Low } from 'lowdb';
import { JSONFile } from 'lowdb/node';
import _ from 'lodash';

dotenv.config();

const TOKEN = process.env.BOT_TOKEN;
const API = `https://api.telegram.org/bot${TOKEN}`;
const PORT = process.env.PORT || 3000;

// Kh·ªüi t·∫°o lowdb
const adapter = new JSONFile('db.json');
const db = new Low(adapter, { shifts: {} });

// Kh·ªüi t·∫°o server v√† database
(async () => {
  try {
    // ƒê·ªçc ho·∫∑c kh·ªüi t·∫°o database
    await db.read();
    db.data = db.data || { shifts: {} };
    await db.write();

    // T·∫°o server HTTP
    const server = http.createServer(async (req, res) => {
      if (req.method === 'POST' && req.url === '/') {
        let body = '';
        req.on('data', chunk => body += chunk);
        req.on('end', async () => {
          try {
            // Log to√†n b·ªô body ƒë·ªÉ debug
            console.log('Body nh·∫≠n ƒë∆∞·ª£c:', body);
            const update = JSON.parse(body);
            const msg = update.message?.text?.trim() || '';
            const chatId = update.message?.chat?.id;
            const username = update.message?.from?.username || update.message?.from?.first_name || 'Unknown';
            const today = new Date().toISOString().split('T')[0];

            // Log th·ªùi gian v√† tin nh·∫Øn
            const now = new Date().toLocaleString('vi-VN', { timeZone: 'Asia/Ho_Chi_Minh' });
            console.log(`[${now}] Tin nh·∫Øn t·ª´ ${username}: "${msg}"`);

            // X·ª≠ l√Ω l·ªánh /ca
            if (msg.startsWith('/ca')) {
              const parts = msg.split(' ');
              if (parts.length < 2 || !/^\d{1,2}:\d{2}$/.test(parts[1])) {
                await sendMessage(chatId, '‚ùó D√πng: /ca HH:mm (v√≠ d·ª•: /ca 17:30)');
                return res.end('ok');
              }
              const shiftTime = parts[1];
              db.data.shifts[today] = db.data.shifts[today] || {};
              db.data.shifts[today][username] = shiftTime;
              await db.write();
              await sendMessage(chatId, `‚úÖ ƒê√£ l∆∞u gi·ªù ch·ªët ca c·ªßa b·∫°n l√† ${shiftTime}`);
              return res.end('ok');
            }

            // X·ª≠ l√Ω l·ªánh /giove
            if (msg === '/giove') {
                const shiftTime = _.get(db, `data.shifts.${today}.${username}`);
              if (!shiftTime) {
                await sendMessage(chatId, '‚ö†Ô∏è B·∫°n ch∆∞a ƒë·∫∑t gi·ªù ch·ªët ca h√¥m nay.');
                return res.end('ok');
              }
              const [h, m] = shiftTime.split(':').map(Number);
              const now = new Date();
              const shiftDate = new Date();
              shiftDate.setHours(h, m, 0, 0);
              const diff = shiftDate - now;

              if (diff <= 0) {
                await sendMessage(chatId, 'üéâ ƒê√£ t·ªõi gi·ªù v·ªÅ r·ªìi!');
                return res.end('ok');
              }

              const mins = Math.floor(diff / 60000);
              const hours = Math.floor(mins / 60);
              const minutes = mins % 60;
              await sendMessage(chatId, `‚è≥ C√≤n kho·∫£ng ${hours} gi·ªù ${minutes} ph√∫t n·ªØa l√† t·ªõi gi·ªù v·ªÅ (${shiftTime})`);
              return res.end('ok');
            }

            // X·ª≠ l√Ω c√°c l·ªánh/tin nh·∫Øn kh√°c
            await sendMessage(chatId, `‚ÑπÔ∏è L·ªánh "${msg}" kh√¥ng ƒë∆∞·ª£c nh·∫≠n di·ªán. D√πng /ca HH:mm ho·∫∑c /giove.`);
            console.log(`[${now}] L·ªánh kh√¥ng nh·∫≠n di·ªán: "${msg}"`);
            return res.end('ok');
          } catch (error) {
            console.error('L·ªói x·ª≠ l√Ω y√™u c·∫ßu:', error);
            res.end('error');
          }
        });
      } else {
        res.end('ok');
      }
    });

    // Kh·ªüi ƒë·ªông server
    server.listen(PORT, () => console.log(`Bot ƒëang ch·∫°y tr√™n c·ªïng ${PORT}`));

    // H√†m g·ª≠i tin nh·∫Øn
    async function sendMessage(chatId, text) {
      try {
        const response = await fetch(`${API}/sendMessage`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ chat_id: chatId, text }),
        });
        console.log(`G·ª≠i tin nh·∫Øn t·ªõi ${chatId}: ${text}`);
        return await response.json();
      } catch (error) {
        console.error('L·ªói g·ª≠i tin nh·∫Øn:', error);
      }
    }

    // Thi·∫øt l·∫≠p webhook (ch·ªâ ch·∫°y 1 l·∫ßn khi kh·ªüi ƒë·ªông)
    async function setWebhook() {
      try {
        // Thay YOUR_NGROK_URL b·∫±ng URL t·ª´ ngrok
        const webhookUrl = process.env.WEBHOOK_URL || 'YOUR_NGROK_URL';
        const response = await fetch(`${API}/setWebhook?url=${webhookUrl}`);
        const result = await response.json();
        console.log('Webhook thi·∫øt l·∫≠p:', result);
      } catch (error) {
        console.error('L·ªói thi·∫øt l·∫≠p webhook:', error);
      }
    }

    // G·ªçi thi·∫øt l·∫≠p webhook
    if (process.env.WEBHOOK_URL) {
      await setWebhook();
    } else {
      console.warn('Ch∆∞a c√≥ WEBHOOK_URL trong .env. Ch·∫°y ngrok v√† thi·∫øt l·∫≠p webhook th·ªß c√¥ng.');
    }

  } catch (error) {
    console.error('L·ªói kh·ªüi t·∫°o:', error);
  }
})();